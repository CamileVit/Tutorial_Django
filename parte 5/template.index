#Exibe informações dinâmicas, como o número de livros, cópias, cópias disponíveis e autores.

{% extends "base_generic.html" %}

{% block content %}
  <h1>Local Library Home</h1>
  <p>
    Welcome to LocalLibrary, a website developed by
    <em>Mozilla Developer Network</em>!
  </p>
  <h2>Dynamic content</h2>
  <p>The library has the following record counts:</p>
  <ul>
    <li><strong>Books:</strong> {{ num_books }}</li>
    <li><strong>Copies:</strong> {{ num_instances }}</li>
    <li><strong>Copies available:</strong> {{ num_instances_available }}</li>
    <li><strong>Authors:</strong> {{ num_authors }}</li>
  </ul>
{% endblock %}

#dicionário contendo chaves ('num_books', 'num_instances', etc.) associadas a valores.
context = {
    'num_books': num_books,
    'num_instances': num_instances,
    'num_instances_available': num_instances_available,
    'num_authors': num_authors,
}
#O contexto é passado para o template utilizando a função render. Isso injeta os valores dinâmicos no template antes de ser exibido.
return render(request, 'index.html', context=context)


#Referenciando arquivos estáticos nos templates
#A tag {% static %} é usada para carregar arquivos estáticos (como CSS, imagens) no template.

<!-- Add additional CSS in static file -->
{% load static %}
<link rel="stylesheet" href="{% static 'css/styles.css' %}" />


#adicionar uma imagem à página 

{% load static %}
<img
  src="{% static 'catalog/images/local_library_model_uml.png' %}"
  alt="UML diagram"
  style="width:555px;height:540px;" />

#Esses códigos ilustram a construção de um template dinâmico no Django, passando valores dinâmicos por meio de um
contexto e referenciando arquivos estáticos, como CSS e imagens, para serem exibidos na página.

